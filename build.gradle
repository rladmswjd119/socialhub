plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.allclear'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // 사용자
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-gson:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'org.springframework.boot:spring-boot-starter-mail:3.1.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // QueryDSL 설정
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    implementation "com.querydsl:querydsl-core:5.0.0"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.0"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger 설정
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}
// 경로설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean {
    delete file(querydslDir)
}

tasks.named('test') {
    useJUnitPlatform()
}

// 테스트 커버리지 구하기 위한 jacoco report 세팅 시작
jacocoTestReport {
    reports {
        xml {
            enabled true
        }
        csv {
            enabled true
        }
        html {
            enabled true
        }

        xml.destination file(project.layout.buildDirectory.dir("jacoco/index.xml")) as File
        csv.destination file(project.layout.buildDirectory.dir("jacoco/index.csv")) as File
        html.destination file(project.layout.buildDirectory.dir("jacoco/index.html")) as File
    }

    // 커버리지 보고서 제외 범위 설정
    getClassDirectories().setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/*Request*",
                        "**/*Response*",
                        "**/*Exception*"
                ])
            })
    )
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.8
            }

            excludes = [
                    '*.*Application'
            ]
        }
    }
}

// 테스트 커버리지 구하기 위한 jacoco 세팅 끝
